#!/bin/bash

#Initial variables
config_dir="/etc/server-monitor/"
server_list="${config_dir}servers.conf"
## Get public IP
pub_ip=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
if [[ "$pub_ip" = "" ]]; then
		pub_ip=$(wget -4qO- "http://whatismyip.akamai.com/")
fi

#SETUP
## Check if valid OS
if [[ -e /etc/debian_version ]]; then
	OS=debian
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
	OS=centos
else
	echo "Looks like you aren't running this installer on a Debian, Ubuntu or CentOS system"
	exit 5
fi

## Install packages
if [[ "$OS" = 'debian' ]]; then
    apt-get update
    apt-get install -y nginx php5-fpm openssl
else
    yum update
    yum install -y nginx php5-fpm openssl
fi

## Check if server is behind NAT
IP=$(wget -4qO- "http://whatismyip.akamai.com/")
if [[ "$pub_ip" != "$IP" ]]; then
		echo -e "\nYour server may be behind a NAT!\n"
		echo -e "\nIf your server is NATed (e.g. LowEndSpirit), I need to know the external IP and an available port for the web server"
		read -p "External IP: " -e USEREXTERNALIP
		if [[ "$USEREXTERNALIP" != "" ]]; then
			pub_ip=$USEREXTERNALIP
		fi
fi

## Ask port number
echo -e "\nPlease choose a port for your NGINX webserver to be installed on"
read -p "Port: " -e -i 443 port

## Setup NGINX
### Setup ssl
mkdir /etc/nginx/ssl
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt

### Setup NGINX config
echo -e "server {
        listen 80 default_server;

        listen $port ssl;

        root ${config_dir}website/;
        index.php;

        server_name $pub_ip;
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        location / {
            try_files \$uri \$uri/ =404;
        }

        location ~ \.php$ {
            try_files \$uri =404;
            fastcgi_pass unix:/var/run/php5-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            include fastcgi_params;
        }
}" > /etc/nginx/sites-enabled/server-monitor
ln -s /etc/nginx/sites-enabled/server-monitor /etc/nginx/sites-available/server-monitor

## file setup
mkdir -p "${config_dir}website/"
echo -e "# DO NOT EDIT THIS FILE!
# USE THE server-monitor.sh SCRIPT
" > "$server_list"

### PHP incoming file
echo -e "<?php
\$key = \$_GET['key'];

include 'server_keys.php';

if(in_array(\$key,\$servers)){
        \$myfile = fopen('${config_dir}website/notify/'.\$key, \"w\") or die(\"Unable to open file!\");
        fwrite(\$myfile, date(\"Y-m-d H:i:s\"));
        fclose(\$myfile);
        echo \"1\";
}
" > "${config_dir}website/notify.php"

### PHP server file
echo -e '<?php
$servers = array(
);
' > "${config_dir}website/server_keys.php"

### PHP notifi file
echo -e '<?php
$servers = array(
);
' > "${config_dir}website/server_keys.php"

echo -e "Would you like to?"
echo -e "\t1) Add a new server"
echo -e "\t2) Delete a server"
echo -e "\t3) Remove Server Monitor config"
echo -e "\t4) Exit"

read -p "Choose option [1-3]: " option
case $option in
    1)
        read -p "Server name: " -e SERVER_NAME
        ran_string=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 40 | head -n 1)
        echo -e "$SERVER_NAME|$ran_string" >> "$server_list"
        echo -e "Curl please"
    ;;
    2)
    echo "Delete server"
    ;;
    3)
    echo "Remove Server Monitor config"
    ;;
    4)
    exit
    ;;
esac